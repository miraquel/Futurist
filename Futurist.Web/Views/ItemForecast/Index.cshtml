@model Futurist.Service.Dto.Common.ServiceResponse<List<Futurist.Service.Dto.ItemForecastSpDto>>

@{
    ViewBag.Title = "Item Forecast Summary";
    ViewBag.pTitle = "Item Forecast Summary";
    ViewBag.pageTitle = "Pages";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section styles{
    <link href="/assets/css/datatables.min.css" rel="stylesheet">
}

@Html.AntiForgeryToken()

<div class="row">
    <div class="col-12">
        @if (ViewBag.Error != null)
        {
            <div class="alert alert-danger mb-xl-0" role="alert">
                @ViewBag.Error
            </div>
        }
        @if (ViewBag.Errors != null)
        {
            @foreach(var error in ViewBag.Errors)
            {
                <div class="alert alert-danger mb-xl-0" role="alert">
                    @error
                </div>
            }
        }
        @if (ViewBag.Success != null)
        {
            <div class="alert alert-success mb-xl-0" role="alert">
                @ViewBag.Success
            </div>
        }
    </div>
</div>
                
<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header">
                <h1 class="mb-3">Item Forecast Summary</h1>

                <div class="input-group mb-3">
                    <label class="input-group-text" for="roomSelect">Room</label>
                    <select id="roomSelect" name="roomId" class="form-control">
                        @if (ViewBag.RoomIds != null)
                        {
                            @foreach (var room in ViewBag.RoomIds)
                            {
                                <option value="@room">@room</option>
                            }
                        }
                    </select>
                </div>

                <div class="d-flex justify-content-between">
                    <form asp-controller="ItemForecast" asp-action="Import" asp-route-room="0" onsubmit="importData()" method="post" enctype="multipart/form-data">
                        <div class="input-group">
                            <input type="file" id="fileInput" name="file" class="form-control" aria-describedby="fileInputAddon" aria-label="Upload" accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" required>
                            <button type="submit" class="btn btn-outline-success material-shadow-none" id="fileInputAddon">
                                <span class="ri-upload-2-fill me-1"></span>
                                Upload
                            </button>
                        </div>
                    </form>
                    <div>
                        <button class="btn btn-primary" id="checkMupBtn" onclick="reloadTable()">
                            <i class="ri-refresh-line"></i>
                            Refresh Table
                        </button>
                        <a asp-controller="ItemForecast" asp-action="ExportItemForecast" asp-route-room="0" onclick="downloadItemForecast()" id="linkDownload" class="btn btn-info">
                            <i class="ri-file-excel-2-fill"></i>
                            Download Result
                        </a>
                    </div>
                </div>
            </div><!-- end card header -->

            <div class="card-body">
                <table id="datatables-item-adjustments" class="display table table-bordered dt-responsive datatable-wrapper" style="width:100%">
                    <thead>
                    <tr>
                        <th>Room</th>
                        <th>Item ID</th>
                        <th>Item Name</th>
                        <th>Unit</th>
                        <th>Group Substitusi</th>
                        <th>Group Procurement</th>
                        <th>Price</th>
                        <th>Latest Purchase Date</th>
                        <th>Forecast Date</th>
                        <th>Forecast Price</th>
                        <th>Forced Price</th>
                    </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            <th>Room</th>
                            <th>Item ID</th>
                            <th>Item Name</th>
                            <th>Unit</th>
                            <th>Group Substitusi</th>
                            <th>Group Procurement</th>
                            <th>Price</th>
                            <th>Latest Purchase Date</th>
                            <th>Forecast Date</th>
                            <th>Forecast Price</th>
                            <th>Forced Price</th>
                        </tr>
                    </tfoot>
                </table>
            </div><!-- end card-body -->
        </div><!-- end card -->
    </div>
    <!-- end col -->
</div>
<!-- end row -->
            
@section scripts{
    <script src="/assets/js/datatables.min.js"></script>
    <script src="/assets/js/helper.js"></script>

    <script>
        // get AntiForgeryToken using jquery
        const token = $('input[name="__RequestVerificationToken"]').val();
        const roomSelect = $("#roomSelect");

        function reloadTable() {
            $('#datatables-item-adjustments').DataTable().ajax.reload();

            // update the window url to include the selected room
            const room = roomSelect.val();
            const currentUrl = new URL(window.location.href);
            currentUrl.searchParams.set('room', room);
            window.history.pushState({}, '', currentUrl.toString());
        }

        roomSelect.change(function () {
            reloadTable();
        });

        function downloadItemForecast() {
            // change the room id in the download link
            const room = roomSelect.val();
            const linkDownload = $("#linkDownload")[0];
            // edit the query room
            linkDownload.href = linkDownload.href.replace(/room=\d+/, `room=${room}`);
        }
        
        function importData() {
            // change the room id in the form action
            const room = roomSelect.val();
            const formImport = $("#formImport")[0];
            // edit the query room
            formImport.action = formImport.action.replace(/room=\d+/, `room=${room}`);
        }

        $(document).ready(function() {
            // init room select with the current room from the ViewBag
            const roomId = '@ViewBag.InitialRoomId';
            if (roomId) {
                roomSelect.val(roomId);
            }
            // Initialize datatables
            $('#datatables-item-adjustments').DataTable({
                searchDelay: 1000,
                ajax: {
                    url: `/api/ItemForecastApi/GetItemForecastList`,
                    data: function(d) {
                        // Get room id from dropdown
                        return { room: $("#roomSelect").val() };
                    },
                    beforeSend: function(xhr) {
                        xhr.setRequestHeader("RequestVerificationToken", token);
                    },
                    dataSrc: function(json) {
                        if (json.data && Array.isArray(json.data)) {
                            return json.data;
                        }
                        return [];
                    }
                },
                columns: [
                    { data: 'room', width: '80px' },
                    { data: 'itemId', width: '120px' },
                    { data: 'itemName' },
                    { data: 'unitId', width: '80px' },
                    { data: 'vtaMpSubstitusiGroupId', width: '150px' },
                    { data: 'groupProcurement', width: '150px' },
                    { 
                        data: 'price', 
                        width: '100px',
                        render: function(data, type) {
                            return data ? numberFormat.format(parseFloat(data)) : '';
                        }
                    },
                    { 
                        data: 'latestPurchaseDate', 
                        width: '150px',
                        render: function(data, type) {
                            // For sorting/filtering use the raw date
                            if (type === 'sort' || type === 'filter') {
                                return data ? data : '';
                            }
                            // For display, round and format with thousands separator
                            return data ? moment(data).format("DD MMM YYYY") : ''
                        },
                    },
                    { 
                        data: 'forecastDate', 
                        width: '150px',
                        render: function(data, type) {
                            // For sorting/filtering use the raw date
                            if (type === 'sort' || type === 'filter') {
                                return data ? data : '';
                            }
                            // For display, round and format with thousands separator
                            return data ? moment(data).format("DD MMM YYYY") : ''
                        }
                    },
                    { 
                        data: 'forecastPrice', 
                        width: '100px',
                        render: function(data, type) {
                            return data ? numberFormat.format(parseFloat(data)) : '';
                        }
                    },
                    { 
                        data: 'forcedPrice', 
                        width: '100px',
                        render: function(data, type) {
                            return data != null ? numberFormat.format(parseFloat(data)) : '';
                        }
                    }
                ],
                columnDefs: [
                    {
                        targets: [0, 1, 3, 4, 6],
                        className: 'text-center'
                    }
                ],
                processing: true,
                paging: true,
                searching: true,
                ordering: true,
                autoWidth: false,
                responsive: true,
                scrollX: true,
                initComplete: function () {
                    this.api()
                        .columns()
                        .every(function () {
                            let column = this;
                            let title = column.footer().textContent;

                            let header = column.header();
                            header.style.backgroundColor = '#4F81BD';
                            header.style.color = 'white';

                            let input = document.createElement('input');
                            input.placeholder = title;
                            input.className = "form-control";
                            input.style.width = '100%';
                            column.footer().replaceChildren(input);

                            input.addEventListener('keyup', debounce(() => {
                                if (column.search() !== input.value) {
                                    column.search(input.value).draw();
                                }
                            }, 1000));
                        });
                }
            });
        });
    </script>
}
