@model Futurist.Service.Dto.Common.ServiceResponse<Futurist.Service.Dto.Common.PagedListDto<Futurist.Service.Dto.RofoDto>>

@{
    ViewBag.Title = "Upload Rofo";
    ViewBag.pTitle = "Upload Rofo";
    ViewBag.pageTitle = "Pages";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section styles{
    <link href="/assets/css/datatables.min.css" rel="stylesheet">
    <link href="/assets/css/flatpickr.min.css" rel="stylesheet">
}

@Html.AntiForgeryToken()

<div class="row">
    <div class="col-12">
        @if (ViewBag.Errors != null)
        {
            @foreach(var error in ViewBag.Errors)
            {
                <div class="alert alert-danger mb-xl-0" role="alert">
                    @error
                </div>
            }
        }
        @if (ViewBag.Message != null)
        {
            <div class="alert alert-success mb-xl-0" role="alert">
                @ViewBag.Message
            </div>
        }
    </div>
</div>
                

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header">
                <h1 class="mb-3">Upload Rofo</h1>
                <!-- Dropdown for room ids -->
                <div class="form-group row mb-3">
                    <label class="col-sm-1" for="roomSelect">Select Room</label>
                    <div class="col-sm-11">
                        <select id="roomSelect" name="roomId" class="form-control">
                            @foreach (var id in ViewBag.RoomIds)
                            {
                                <option value="@id">@id</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="mb-3">
                    <form asp-controller="Rofo" asp-action="Import" method="post" enctype="multipart/form-data">
                        <input type="file" id="fileInput" name="file" style="display: none;" onchange="this.form.submit()">
                        <label for="fileInput" class="btn btn-primary">
                            <svg class="me-2" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24">
                                <path fill="currentColor"
                                      d="M18 15v3H6v-3H4v3c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2v-3zM7 9l1.41 1.41L11 7.83V16h2V7.83l2.59 2.58L17 9l-5-5z"/>
                            </svg>
                            Upload Data
                        </label>
                    </form>
                </div>
               
            </div><!-- end card header -->

            <div class="card-body">
                <table id="datatables-rofo" class="display table table-bordered dt-responsive" style="width:100%">
                    <thead>
                    <tr>
                        <th>Room</th>
                        <th>Rofo Date</th>
                        <th>Item Id</th>
                        <th>Item Name</th>
                        <th>Qty</th>
                    </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            <th>Room</th>
                            <th>Rofo Date</th>
                            <th>Item ID</th>
                            <th>Item Name</th>
                            <th>Qty</th>
                    </tfoot>
                </table>
            </div><!-- end card-body -->
        </div><!-- end card -->
    </div>
    <!-- end col -->
</div>
<!-- end row -->
            
@section scripts{
    <script src="/assets/js/datatables.min.js"></script>
    <script src="/assets/js/flatpickr.js"></script>

    <script>
        // get AntiForgeryToken using jquery
        const token = $('input[name="__RequestVerificationToken"]').val();

        $("#roomSelect").change(function () {
            $('#datatables-rofo').DataTable().ajax.reload();
        });

        // Debounce helper function
        function debounce(func, delay) {
            let timeout;
            return function(...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), delay);
            };
        }

        // Replace gridjs initialization with DataTables initialization following RofoDto structure
        if (document.getElementById("datatable-rofo") || document.getElementById("datatables-rofo")) {
            $('#datatables-rofo').DataTable({
                searchDelay: 1000,
                ajax: {
                    url: `/api/RofoApi/GetRofoPagedList`,
                    data: function(d) {
                        const query = {
                            pageNumber: (d.start / d.length) + 1,
                            pageSize: d.length,
                        };
                        if (d.search && d.search.value) {
                            query.Search = d.search.value;
                        }
                        if (d.order && d.order.length) {
                            query.SortBy = d.columns[d.order[0].column].data;
                            query.IsSortAscending = d.order[0].dir === 'asc';
                        }

                        d.columns.forEach((column, _) => {
                            if (column.search && column.search.value) {
                                // Encode the search value for URL safety.
                                query[`Filters.${column.data.charAt(0).toUpperCase() + column.data.slice(1)}`] = column.search.value;
                            }
                        });

                        // get room id from dropdown and add to query
                        query['Filters.Room'] = $("#roomSelect").val();
                        
                        return query;
                    },
                    beforeSend: function(xhr) {
                        xhr.setRequestHeader("RequestVerificationToken", token);
                    },
                    dataSrc: function(json) {
                        // Check if response follows ServiceResponse<PagedListDto<RofoDto>> structure:
                        if (json.data && Array.isArray(json.data.items)) {
                            json.recordsTotal = json.data.totalCount;
                            json.recordsFiltered = json.data.totalCount;
                            return json.data.items;
                        }
                        // Fallback: if json itself is an array.
                        return json;
                    }
                },
                columns: [
                    { data: 'room', width: '50px' },
                    {
                        data: 'rofoDate',
                        defaultContent: '',
                        render: function(data) {
                            return moment(data).format("DD MMM YYYY");
                        },
                        width: '100px'
                    },
                    { data: 'itemId', width: '100px' },
                    { data: 'itemName' },
                    { data: 'qty', width: '80px' }
                ],
                columnDefs: [
                    {
                        targets: [0, 1, 2], // Column indices for Room, QtyRofo, Qty, etc.
                        className: 'text-center'
                    }
                ],
                processing: true,
                serverSide: true,
                paging: true,
                searching: true,
                ordering: true,
                autoWidth: false,
                responsive: true,
                scrollX: true,
                initComplete: function () {
                    this.api()
                        .columns()
                        .every(function () {
                            let column = this;
                            let title = column.footer().textContent;

                            let header = column.header();
                            // change the background
                            header.style.backgroundColor = '#4F81BD';
                            header.style.color = 'white';

                            // Special handling for Rofo Date column
                            if (title.trim() === "Rofo Date") {
                                // Create flatpickr input for date
                                let dateInput = document.createElement('input');
                                dateInput.placeholder = title;
                                dateInput.className = "form-control";
                                dateInput.style.width = '100%';

                                column.footer().replaceChildren(dateInput);

                                // Initialize flatpickr
                                flatpickr(dateInput, {
                                    dateFormat: "Y/m/d",
                                    onChange: function(selectedDates, dateStr) {
                                        // Only search and draw when both dates are selected in range mode
                                        //if (selectedDates.length === 2) {
                                        // Replace "to" with "-" in the date range string
                                        //    const formattedDateStr = dateStr.replace(" to ", "-");
                                        //    column.search(formattedDateStr).draw();
                                        //}
                                        column.search(dateStr).draw();
                                    },
                                    //mode: "range",
                                });
                            } else {
                                // Default handling for other columns
                                let input = document.createElement('input');
                                input.placeholder = title;
                                input.className = "form-control";
                                input.style.width = '100%';
                                column.footer().replaceChildren(input);

                                // Debounced event listener for user input (1 second delay)
                                input.addEventListener('keyup', debounce(() => {
                                    if (column.search() !== input.value) {
                                        column.search(input.value).draw();
                                    }
                                }, 1000));
                            }
                        });
                }
            });
        }
    </script>
}