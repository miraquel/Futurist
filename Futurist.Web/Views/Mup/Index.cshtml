@model Futurist.Service.Dto.MupSpDto

@{
    ViewBag.Title = "MUP Calculation";
    Layout = "_Layout";
}

@section styles{
    <link href="/assets/css/datatables.min.css" rel="stylesheet">
    <link href="/assets/css/flatpickr.min.css" rel="stylesheet">
    <style>
        .processing-badge {
            display: none;
            background-color: #dc3545;
            color: white;
            border-radius: 50%;
            padding: 0.25rem 0.5rem;
            margin-left: 0.5rem;
            font-size: 0.75rem;
            vertical-align: middle;
        }
        
        .disabled-button {
            pointer-events: none;
            opacity: 0.6;
        }
    </style>
}

@Html.AntiForgeryToken()

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header">
                <h1>MUP Calculation</h1>
                <!-- Dropdown for room ids -->
                <div class="form-group row mb-3">
                    <label class="col-sm-1" for="roomSelect">Select Room</label>
                    <div class="col-sm-11">
                        <select id="roomSelect" name="roomId" class="form-control">
                            @foreach (var id in ViewBag.RoomIds)
                            {
                                <option value="@id">@id</option>
                            }
                        </select>
                        <span id="processingBadge" class="processing-badge">Processing</span>
                    </div>
                </div>

                <div class="mb-3">
                    <button class="btn btn-success" id="processMupLink" onclick="processMup()">Process MUP</button>
                    <button class="btn btn-warning" id="checkMupBtn" onclick="reloadTable()">Check MUP Result</button>
                    <a asp-controller="Mup" asp-action="DownloadMupResult" asp-route-room="0" onclick="downloadMup()" id="linkDownload" class="btn btn-primary">Download MUP Result</a>
                </div>
            </div>
            <div class="card-body">
                <table id="datatables-mup-result" class="display table table-bordered" style="width:100%">
                    <thead>
                    <tr>
                        <th>Room</th>
                        <th>Product ID</th>
                        <th>Product Name</th>
                        <th>Rofo Date</th>
                        <th>Qty Rofo</th>
                        <th>Item ID</th>
                        <th>Item Name</th>
                        <th>Group Substitusi</th>
                        <th>Item Allocated ID</th>
                        <th>Item Allocated Name</th>
                        <th>Unit</th>
                        <th>Batch</th>
                        <th>Qty</th>
                        <th>Price</th>
                        <th>Source</th>
                        <th>Ref ID</th>
                        <th>Latest Purchase Price</th>
                        <th>Gap</th>
                    </tr>
                    </thead>
                    <tfoot>
                    <tr>
                        <th>Room</th>
                        <th>Product ID</th>
                        <th>Product Name</th>
                        <th>Rofo Date</th>
                        <th>Qty Rofo</th>
                        <th>Item ID</th>
                        <th>Item Name</th>
                        <th>Group Substitusi</th>
                        <th>Item Allocated ID</th>
                        <th>Item Allocated Name</th>
                        <th>Unit</th>
                        <th>Batch</th>
                        <th>Qty</th>
                        <th>Price</th>
                        <th>Source</th>
                        <th>Ref ID</th>
                        <th>Latest Purchase Price</th>
                        <th>Gap</th>
                    </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="/assets/js/datatables.min.js"></script>
    <script src="/assets/js/flatpickr.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>
    
    <script>
        const roomSelect = $("#roomSelect");
        const roomId = roomSelect.val();
        const token = $('input[name="__RequestVerificationToken"]').val();
        const processMupButton = $("#processMupLink");
        const processingBadge = $("#processingBadge");
        
        // SignalR connection
        let connection;
        let inProcessRoomIds = [];
        let pollingInterval;
        
        // Initialize SignalR connection
        function initializeSignalR() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/futuristHub")
                .withAutomaticReconnect()
                .build();
                
            // Handle incoming notifications about running jobs
            connection.on("MupProcessingStateChanged", (roomIds) => {
                inProcessRoomIds = roomIds || [];
                updateProcessingUI();
            });
            
            // Start the connection
            connection.start()
                .then(() => {
                    console.log("SignalR Connected");
                    // Call the correct hub method to get initial state
                    refreshProcessingState();
                    
                    // Set up polling as a backup for notifications
                    pollingInterval = setInterval(refreshProcessingState, 10000); // Check every 10 seconds
                })
                .catch(err => console.error("SignalR Connection Error: ", err));
        }
        
        // Refresh the processing state from the server
        function refreshProcessingState() {
            connection.invoke("GetMupInProcessRoomIds")
                .then(roomIds => {
                    inProcessRoomIds = roomIds || [];
                    updateProcessingUI();
                })
                .catch(err => console.error("Error getting MUP processing state: ", err));
        }
        
        // Update UI based on processing status
        function updateProcessingUI() {
            const currentRoomId = parseInt(roomSelect.val());
            
            // Check if current room ID is in process
            if (inProcessRoomIds.includes(currentRoomId)) {
                processMupButton.addClass("disabled-button");
                processingBadge.show();
            } else {
                processMupButton.removeClass("disabled-button");
                processingBadge.hide();
            }
        }
        
        function processMup(){
            const roomId = roomSelect.val();
            
            // Double-check if room is already processing
            if (inProcessRoomIds.includes(parseInt(roomId))) {
                alert("This room is already being processed!");
                return;
            }
            
            $.ajax({
                url: '/api/MupApi/ProcessMup',
                type: 'POST',
                data: JSON.stringify(parseInt(roomId) || 0),
                contentType: 'application/json',
                beforeSend: function(xhr) {
                    xhr.setRequestHeader("RequestVerificationToken", token);
                },
                success: function(data){
                    alert(data);
                    // Immediately update processing state after queuing job
                    refreshProcessingState();
                },
                error: function(err){
                    alert(err);
                }
            });
        }

        // Debounce helper function
        function debounce(func, delay) {
            let timeout;
            return function(...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), delay);
            };
        }

        function reloadTable() {
            $('#datatables-mup-result').DataTable().ajax.reload();
        }

        $('#roomSelect').change(function () {
            reloadTable();
            updateProcessingUI();
        });
        
        function downloadMup() {
            // change the room id in the download link
            const room = roomSelect.val();
            const linkDownload = $("#linkDownload")[0];
            // edit the query room
            linkDownload.href = linkDownload.href.replace(/room=\d+/, `room=${room}`);
        }

        // Load errors using selected room id from dropdown
        if (document.getElementById("datatables-mup-result") || document.getElementById("datatables-mup-result")) {
            $('#datatables-mup-result').DataTable({
                searchDelay: 1000,
                ajax: {
                    url: '/api/MupApi/MupResultPagedList/',
                    data: function(d) {
                        const query = {
                            pageNumber: (d.start / d.length) + 1,
                            pageSize: d.length,
                        };
                        if (d.search && d.search.value) {
                            query.Search = d.search.value;
                        }
                        if (d.order && d.order.length) {
                            query.SortBy = d.columns[d.order[0].column].data;
                            query.IsSortAscending = d.order[0].dir === 'asc';
                        }

                        d.columns.forEach((column, _) => {
                            if (column.search && column.search.value) {
                                // Encode the search value for URL safety.
                                query[`Filters.${column.data.charAt(0).toUpperCase() + column.data.slice(1)}`] = column.search.value;
                            }
                        });

                        // get room id from dropdown and add to query
                        query['Filters.Room'] = roomSelect.val();

                        return query;
                    },
                    beforeSend: function(xhr) {
                        xhr.setRequestHeader("RequestVerificationToken", token);
                    },
                    dataSrc: function(json) {
                        // Check if response follows ServiceResponse<PagedListDto<RofoDto>> structure:
                        if (json.data && Array.isArray(json.data.items)) {
                            json.recordsTotal = json.data.totalCount;
                            json.recordsFiltered = json.data.totalCount;
                            return json.data.items;
                        }
                        // Fallback: if json itself is an array.
                        return json;
                    },
                    error: function(err){
                        alert(err.responseJSON.errorMessage);
                    }
                },
                columns: [
                    { data: 'room', defaultContent: '' },
                    { data: 'productId', defaultContent: '' },
                    { data: 'productName', width: '200px', defaultContent: '' },
                    { 
                        data: 'rofoDate', 
                        defaultContent: '', 
                        render: function(data) { 
                            return moment(data).format("DD MMM YYYY"); 
                        },
                        width: '100px'
                    },
                    { 
                        data: 'qtyRofo', 
                        defaultContent: '',
                        render: function(data, type) {
                            // For sorting/filtering use the raw number
                            if (type === 'sort' || type === 'filter') {
                                return data ? parseFloat(data) : 0;
                            }

                            // For display, round and format with thousands separator
                            return data ? Math.round(parseFloat(data)).toLocaleString() : '';
                        }
                    },
                    { data: 'itemId', defaultContent: '' },
                    { data: 'itemName', width: '200px', defaultContent: '' },
                    { data: 'groupSubstitusi', defaultContent: '' },
                    { data: 'itemAllocatedId', defaultContent: '' },
                    { data: 'itemAllocatedName', width: '200px', defaultContent: '' },
                    { data: 'unitId', defaultContent: '' },
                    { data: 'inventBatch', defaultContent: '' },
                    { 
                        data: 'qty', 
                        defaultContent: '', 
                        render: function(data, type) {
                            // For sorting/filtering use the raw number
                            if (type === 'sort' || type === 'filter') {
                                return data ? parseFloat(data) : 0;
                            }

                            // For display, round and format with thousands separator
                            return data ? parseFloat(data).toLocaleString() : '';
                        } 
                    },
                    { 
                        data: 'price', 
                        defaultContent: '',
                        render: function(data, type) {
                            // For sorting/filtering use the raw number
                            if (type === 'sort' || type === 'filter') {
                                return data ? parseFloat(data) : 0;
                            }

                            // For display, round and format with thousands separator
                            return data ? Math.round(parseFloat(data)).toLocaleString() : '';
                        }
                    },
                    { data: 'source', defaultContent: '' },
                    { data: 'refId', defaultContent: '' },
                    { 
                        data: 'latestPurchasePrice', 
                        defaultContent: '',
                        render: function(data, type) {
                            // For sorting/filtering use the raw number
                            if (type === 'sort' || type === 'filter') {
                                return data ? parseFloat(data) : 0;
                            }

                            // For display, round and format with thousands separator
                            return data ? Math.round(parseFloat(data)).toLocaleString() : '';
                        }
                    },
                    { 
                        data: 'gap', 
                        defaultContent: '',
                        render: function(data, type) {
                            // For sorting/filtering use the raw number
                            if (type === 'sort' || type === 'filter') {
                                return data ? parseFloat(data) : 0;
                            }

                            // For display, round and format with thousands separator
                            return data ? Math.round(parseFloat(data)).toLocaleString() : '';
                        }
                    }
                ],
                columnDefs: [
                    {
                        targets: [0, 1, 5, 8, 10, 11, 14, 15, 17], // Column indices for Room, QtyRofo, Qty, etc.
                        className: 'text-center'
                    }
                ],
                processing: true,
                serverSide: true,
                paging: true,
                searching: true,
                autoWidth: false,
                responsive: false,
                scrollX: true,
                initComplete: function () {
                    this.api()
                        .columns()
                        .every(function () {
                            let column = this;
                            
                            let header = column.header();
                            // change the background
                            header.style.backgroundColor = '#4F81BD';
                            header.style.color = 'white';
                            
                            let title = column.footer().textContent;
                            
                            // Special handling for Rofo Date column
                            if (title.trim() === "Rofo Date") {
                                // Create flatpickr input for date
                                let dateInput = document.createElement('input');
                                dateInput.placeholder = title;
                                dateInput.className = "form-control";
                                dateInput.style.width = '100%';
                                
                                column.footer().replaceChildren(dateInput);
                                
                                // Initialize flatpickr
                                flatpickr(dateInput, {
                                    dateFormat: "Y/m/d",
                                    onChange: function(selectedDates, dateStr) {
                                        // Only search and draw when both dates are selected in range mode
                                        //if (selectedDates.length === 2) {
                                            // Replace "to" with "-" in the date range string
                                        //    const formattedDateStr = dateStr.replace(" to ", "-");
                                        //    column.search(formattedDateStr).draw();
                                        //}
                                        column.search(dateStr).draw();
                                    },
                                    //mode: "range",
                                });
                            } else {
                                // Default handling for other columns
                                let input = document.createElement('input');
                                input.placeholder = title;
                                input.className = "form-control";
                                input.style.width = '100%';
                                column.footer().replaceChildren(input);

                                // Debounced event listener for user input (1 second delay)
                                input.addEventListener('keyup', debounce(() => {
                                    if (column.search() !== input.value) {
                                        column.search(input.value).draw();
                                    }
                                }, 1000));
                            }
                        });
                }
            });
        }

        // Initialize SignalR when document is ready
        $(document).ready(function() {
            initializeSignalR();
            
            // Clean up on page unload
            $(window).on('beforeunload', function() {
                if (pollingInterval) {
                    clearInterval(pollingInterval);
                }
            });
        });
    
    </script>
}
