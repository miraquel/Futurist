@model dynamic

@{
    ViewBag.Title = "SCM Domestic By Product";
    Layout = "_Layout";
}

@section styles{
    <link href="/assets/css/datatables.min.css" rel="stylesheet">
}

@Html.AntiForgeryToken()

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header">
                <h1>SCM Domestic By Product</h1>

                <div class="row justify-content-between mb-3">
                    <div class="col-5">
                        <div class="input-group">
                            <label class="input-group-text" for="yearSelect">Year</label>
                            <select id="yearSelect" name="year" class="form-control">
                                <option value="">Select Year</option>
                                @if (ViewBag.Years != null)
                                {
                                    @foreach (var year in ViewBag.Years)
                                    {
                                        <option value="@year">@year</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                    
                    <div class="col-7">
                        <div class="input-group">
                            <label class="input-group-text" for="monthSelect">Month</label>
                            <select id="monthSelect" name="month" class="form-control" disabled>
                                <option value="">Select Month</option>
                            </select>
                        </div>
                    </div>
                </div>

                <button class="btn btn-primary" id="refreshButton" onclick="reloadTable()" disabled>
                    <i class="ri-refresh-line"></i>
                    Refresh Table
                </button>
            </div><!-- end card header -->

            <div class="card-body">
                <table id="datatables-item-adjustments" class="display table table-bordered dt-responsive datatable-wrapper" style="width:100%">
                    <thead>
                        <tr>
                            <th>Period Date</th>
                            <th>Divisi</th>
                            <th>Item ID</th>
                            <th>Item Name</th>
                            <th>Brand</th>
                            <th>Quantity</th>
                            <th>Quantity in KG</th>
                            <th>Sales Amount</th>
                            <th>RMPM Amount</th>
                            <th>Standard Cost</th>
                            <th>%RMPM</th>
                        </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            <th>Period Date</th>
                            <th>Divisi</th>
                            <th>Item ID</th>
                            <th>Item Name</th>
                            <th>Brand</th>
                            <th>Quantity</th>
                            <th>Quantity in KG</th>
                            <th>Sales Amount</th>
                            <th>RMPM Amount</th>
                            <th>Standard Cost</th>
                            <th>%RMPM</th>
                        </tr>
                    </tfoot>
                </table>
            </div><!-- end card-body -->
        </div><!-- end card -->
    </div>
    <!-- end col -->
</div>
<!-- end row -->

@section Scripts {
    <script src="/assets/js/datatables.min.js"></script>
    <script src="/assets/js/helper.js"></script>

    <script>
        // get AntiForgeryToken using jquery
        const token = $('input[name="__RequestVerificationToken"]').val();
        const yearSelect = $("#yearSelect");
        const monthSelect = $("#monthSelect");
        const refreshButton = $("#refreshButton");
        
        let table;

        // populate the month dropdown based on the selected year
        yearSelect.on('change', function () {
            const selectedYear = $(this).val();
            monthSelect.empty().append('<option value="">Select Month</option>'); // Reset month options
            if (selectedYear) {
                $.ajax({
                    url: '/api/ScmReportApi/GetMonths',
                    type: 'GET',
                    data: { year: selectedYear },
                    beforeSend: function(xhr) {
                        xhr.setRequestHeader("RequestVerificationToken", token);
                    },
                    success: function (months) {
                        months.forEach(function (month) {
                            // Convert month number to month name
                            const monthName = moment().month(month - 1).format('MMMM');
                            monthSelect.append(`<option value="${month}">${monthName}</option>`);
                        });
                        monthSelect.prop('disabled', false);
                    },
                    error: function () {
                        alert('Failed to load months.');
                    }
                });
            } else {
                monthSelect.prop('disabled', true);
            }

            if (selectedYear && monthSelect.val()) {
                refreshButton.prop('disabled', false);
            } else {
                refreshButton.prop('disabled', true);
            }
        });
        
        monthSelect.on('change', function () {
            const selectedMonth = $(this).val();
            if (selectedMonth) {
                refreshButton.prop('disabled', false);
            } else {
                refreshButton.prop('disabled', true);
            }
        })
        
        // reload the datatable with selected year and month
        function reloadTable() {
            const year = yearSelect.val();
            const month = monthSelect.val();
            if (!year) {
                alert('Please select a year.');
                return;
            }
            if (!month) {
                alert('Please select a month.');
                return;
            }

            if (!table) {
                table = $('#datatables-item-adjustments').DataTable({
                    destroy: true,
                    ajax: {
                        url: '/api/ScmReportApi/GetDomesticByProduct',
                        type: 'GET',
                        data: function (d) {
                            d.year = year;
                            d.month = month;
                            return d;
                        },
                        beforeSend: function(xhr) {
                            xhr.setRequestHeader("RequestVerificationToken", token);
                        },
                        dataSrc: function(json) {
                            if (json.data && Array.isArray(json.data)) {
                                return json.data;
                            }
                            return [];
                        }
                    },
                    columns: [
                        {
                            data: 'periodDate',
                            render: function(data, type) {
                                // For sorting/filtering use the raw date
                                if (type === 'sort' || type === 'filter') {
                                    return data ? data : '';
                                }
                                // For display, round and format with thousands separator
                                return data ? moment(data).format("MMM YYYY") : ''
                            }
                        },
                        { data: 'divisi' },
                        { data: 'itemId' },
                        { data: 'itemName', width: '200px' },
                        { data: 'brand' },
                        {
                            data: 'qty',
                            render: function(data, type) {
                                // For sorting/filtering use the raw number
                                if (type === 'sort' || type === 'filter') {
                                    return data ? parseFloat(data) : 0;
                                }

                                // For display, round and format with thousands separator
                                return data ? numberFormat.format(data) : '';
                            }
                        },
                        {
                            data: 'qtyInKg',
                            render: function(data, type) {
                                // For sorting/filtering use the raw number
                                if (type === 'sort' || type === 'filter') {
                                    return data ? parseFloat(data) : 0;
                                }

                                // For display, round and format with thousands separator
                                return data ? numberFormat.format(data) : '';
                            }
                        },
                        {
                            data: 'salesAmount',
                            render: function(data, type) {
                                // For sorting/filtering use the raw number
                                if (type === 'sort' || type === 'filter') {
                                    return data ? parseFloat(data) : 0;
                                }

                                // For display, round and format with thousands separator
                                return data ? numberFormat.format(data) : '';
                            }
                        },
                        {
                            data: 'rmpmAmount',
                            render: function(data, type) {
                                // For sorting/filtering use the raw number
                                if (type === 'sort' || type === 'filter') {
                                    return data ? parseFloat(data) : 0;
                                }

                                // For display, round and format with thousands separator
                                return data ? numberFormat.format(data) : '';
                            }
                        },
                        {
                            data: 'stdCost',
                            render: function(data, type) {
                                // For sorting/filtering use the raw number
                                if (type === 'sort' || type === 'filter') {
                                    return data ? parseFloat(data) : 0;
                                }

                                // For display, round and format with thousands separator
                                return data ? numberFormat.format(data) : '';
                            }
                        },
                        {
                            data: 'rmpmPercentage',
                            render: function(data, type) {
                                // For sorting/filtering use the raw number
                                if (type === 'sort' || type === 'filter') {
                                    return data ? parseFloat(data) : 0;
                                }
                                // For display, round and format with thousands separator
                                return data ? percentFormat.format(data) : '';
                            }
                        }
                    ],
                    columnDefs: [
                        {
                            targets: [0, 1, 2, 4],
                            className: 'text-center'
                        }
                    ],
                    processing: true,
                    paging: true,
                    searching: true,
                    ordering: true,
                    autoWidth: false,
                    responsive: true,
                    scrollX: true,
                    colReorder: true,
                    initComplete: function () {
                        this.api()
                            .columns()
                            .every(function () {
                                let column = this;
                                let title = column.footer().textContent;

                                let header = column.header();
                                header.style.backgroundColor = '#4F81BD';
                                header.style.color = 'white';

                                let input = document.createElement('input');
                                input.placeholder = title;
                                input.className = "form-control";
                                input.style.width = '100%';
                                column.footer().replaceChildren(input);

                                input.addEventListener('keyup', debounce(() => {
                                    if (column.search() !== input.value) {
                                        column.search(input.value).draw();
                                    }
                                }, 1000));
                            });
                    }
                });

                new DataTable.Buttons(table, {
                    buttons: [
                        {
                            extend: 'copyHtml5',
                            text: '<i class="ri-file-copy-line"></i> Copy',
                            className: 'btn btn-secondary'
                        },
                        {
                            extend: 'excelHtml5',
                            text: '<i class="ri-file-excel-2-line"></i> Excel',
                            className: 'btn btn-success'
                        },
                        {
                            extend: 'csvHtml5',
                            text: '<i class="ri-file-text-line"></i> CSV',
                            className: 'btn btn-info'
                        }
                    ]
                });

                table
                    .buttons(0, null)
                    .container()
                    .insertBefore(".dt-search");
            }
            else {
                table.ajax.reload();
            }
        }
    </script>
}