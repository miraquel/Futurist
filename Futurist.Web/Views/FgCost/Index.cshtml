@model dynamic

@{
    ViewBag.Title = "FG Cost Summary";
    Layout = "_Layout";
}

@section styles{
    <link href="/assets/css/datatables.min.css" rel="stylesheet">
    <link href="/assets/css/flatpickr.min.css" rel="stylesheet">
}

@Html.AntiForgeryToken()

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header">
                <h1>FG Cost Summary</h1>
                <!-- Dropdown for room ids -->
                <div class="input-group mb-3">
                    <label class="input-group-text" for="roomSelect">Room</label>
                    <select id="roomSelect" name="roomId" class="form-control">
                        @foreach (var id in ViewBag.RoomIds)
                        {
                            <option value="@id">@id</option>
                        }
                    </select>
                </div>

                <div class="d-flex justify-content-between">
                    <button class="btn btn-success" id="checkMupBtn" onclick="reloadTable()">
                        <i class="ri-refresh-line"></i>
                        Refresh Table
                    </button>
                    <a asp-controller="FgCost" asp-action="DownloadSummaryFgCost" asp-route-room="0" onclick="downloadSummaryFgCost()" id="linkDownload" class="btn btn-info">
                        <i class="ri-file-excel-2-fill"></i>
                        Export Result
                    </a>
                </div>
            </div>
            <div class="card-body">
                <table id="datatables-fgcost-result" class="display table table-bordered datatable-wrapper" style="width:100%">
                    <thead>
                    <tr>
                        <th>Room</th>
                        <th>Rofo ID</th>
                        <th>Product ID</th>
                        <th>Product Name</th>
                        <th>Unit</th>
                        <th>Unit in Kg</th>
                        <th>Rofo Date</th>
                        <th>Rofo Qty</th>
                        <th>Yield</th>
                        <th>RM Price</th>
                        <th>PM Price</th>
                        <th>Std Cost Price</th>
                        <th>Cost Price</th>
                        <th>Sales Price Index</th>
                    </tr>
                    </thead>
                    <tfoot>
                    <tr>
                        <th>Room</th>
                        <th>Rofo ID</th>
                        <th>Product ID</th>
                        <th>Product Name</th>
                        <th>Unit</th>
                        <th>Unit in Kg</th>
                        <th>Rofo Date</th>
                        <th>Rofo Qty</th>
                        <th>Yield</th>
                        <th>RM Price</th>
                        <th>PM Price</th>
                        <th>Std Cost Price</th>
                        <th>Cost Price</th>
                        <th>Sales Price Index</th>
                    </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="/assets/js/datatables.min.js"></script>
    <script src="/assets/js/flatpickr.js"></script>  
    
    <script>        
        const roomSelect = $("#roomSelect");
        const roomId = roomSelect.val();
        const token = $('input[name="__RequestVerificationToken"]').val();
        
        let initialized = false;
        
        // Debounce helper function
        function debounce(func, delay) {
            let timeout;
            return function(...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), delay);
            };
        }

        function reloadTable() {
            if (document.getElementById("datatables-fgcost-result") || document.getElementById("datatables-fgcost-result")) {
                if (!initialized) {
                    initialized = true;
                    $('#datatables-fgcost-result').DataTable({
                        searchDelay: 1000,
                        ajax: {
                            url: '/api/FgCostApi/GetSummaryFgCost',
                            data: function(d) {
                                d.roomId = roomSelect.val();
                            },
                            beforeSend: function(xhr) {
                                xhr.setRequestHeader("RequestVerificationToken", token);
                            },
                            dataSrc: function(json) {
                                // Check if response follows ServiceResponse structure:
                                if (json.data && Array.isArray(json.data.items)) {
                                    return json.data.items;
                                }
                                // If data is already an array
                                if (Array.isArray(json.data)) {
                                    return json.data;
                                }
                                // Fallback: if json itself is an array
                                return json;
                            },
                            error: function(err){
                                alert(err.responseJSON.errorMessage);
                            }
                        },
                        columns: [
                            { data: 'room', defaultContent: '' },
                            {
                                data: 'rofoId',
                                defaultContent: '',
                                render: function(data) {
                                    return '<a href="/FgCost/DetailsByRofoId/' + data + '">' + data + '</a>';
                                }
                            },
                            { data: 'productId', defaultContent: '' },
                            { data: 'productName', defaultContent: '' },
                            { data: 'unit', defaultContent: '' },
                            { data: 'unitInKg', defaultContent: '' },
                            {
                                data: 'rofoDate',
                                defaultContent: '',
                                render: function(data) {
                                    return moment(data).format("DD MMM YYYY");
                                }
                            },
                            {
                                data: 'rofoQty',
                                defaultContent: '',
                                render: function(data, type) {
                                    // For sorting/filtering use the raw number
                                    if (type === 'sort' || type === 'filter') {
                                        return data ? parseFloat(data) : 0;
                                    }

                                    // For display, round and format with thousands separator
                                    return data ? Math.round(parseFloat(data)).toLocaleString() : '';
                                }
                            },
                            {
                                data: 'yield',
                                defaultContent: '',
                                render: function(data, type) {
                                    // For sorting/filtering use the raw number
                                    if (type === 'sort' || type === 'filter') {
                                        return data ? parseFloat(data) : 0;
                                    }
                                    // For display, round and format with thousands separator
                                    return data ? Intl.NumberFormat('en-US', { style: 'percent', minimumFractionDigits: 1 }).format(data) : '';
                                }
                            },
                            {
                                data: 'rmPrice',
                                defaultContent: '',
                                render: function(data, type) {
                                    // For sorting/filtering use the raw number
                                    if (type === 'sort' || type === 'filter') {
                                        return data ? parseFloat(data) : 0;
                                    }

                                    // For display, round and format with thousands separator
                                    return data ? Math.round(parseFloat(data)).toLocaleString() : '';
                                }
                            },
                            {
                                data: 'pmPrice',
                                defaultContent: '',
                                render: function(data, type) {
                                    // For sorting/filtering use the raw number
                                    if (type === 'sort' || type === 'filter') {
                                        return data ? parseFloat(data) : 0;
                                    }

                                    // For display, round and format with thousands separator
                                    return data ? Math.round(parseFloat(data)).toLocaleString() : '';
                                }
                            },
                            {
                                data: 'stdCostPrice',
                                defaultContent: '',
                                render: function(data, type) {
                                    // For sorting/filtering use the raw number
                                    if (type === 'sort' || type === 'filter') {
                                        return data ? parseFloat(data) : 0;
                                    }

                                    // For display, round and format with thousands separator
                                    return data ? Math.round(parseFloat(data)).toLocaleString() : '';
                                }
                            },
                            {
                                data: 'costPrice',
                                defaultContent: '',
                                render: function(data, type) {
                                    // For sorting/filtering use the raw number
                                    if (type === 'sort' || type === 'filter') {
                                        return data ? parseFloat(data) : 0;
                                    }

                                    // For display, round and format with thousands separator
                                    return data ? Math.round(parseFloat(data)).toLocaleString() : '';
                                }
                            },
                            {
                                data: 'salesPriceIndex',
                                defaultContent: '',
                                render: function(data, type) {
                                    // For sorting/filtering use the raw number
                                    if (type === 'sort' || type === 'filter') {
                                        return data ? parseFloat(data) : 0;
                                    }

                                    // For display, round and format with thousands separator
                                    return data ? Math.round(parseFloat(data)).toLocaleString() : '';
                                }
                            }
                        ],
                        columnDefs: [
                            {
                                targets: [0, 1, 2, 4], // Column indices to center
                                className: 'text-center'
                            }
                        ],
                        processing: true,
                        paging: true,
                        searching: true,
                        autoWidth: false,
                        responsive: false,
                        scrollX: true,
                        order: [],
                        initComplete: function () {
                            this.api()
                                .columns()
                                .every(function () {
                                    let column = this;

                                    let header = column.header();
                                    // change the background
                                    header.style.backgroundColor = '#4F81BD';
                                    header.style.color = 'white';

                                    let title = column.footer().textContent;

                                    // Special handling for Rofo Date column
                                    if (title.trim() === "Rofo Date") {
                                        // Create flatpickr input for date
                                        let dateInput = document.createElement('input');
                                        dateInput.placeholder = title;
                                        dateInput.className = "form-control";
                                        dateInput.style.width = '100%';

                                        column.footer().replaceChildren(dateInput);

                                        // Initialize flatpickr
                                        flatpickr(dateInput, {
                                            dateFormat: "Y/m/d",
                                            onChange: function(selectedDates, dateStr) {
                                                // Only search and draw when both dates are selected in range mode
                                                //if (selectedDates.length === 2) {
                                                // Replace "to" with "-" in the date range string
                                                //    const formattedDateStr = dateStr.replace(" to ", "-");
                                                //    column.search(formattedDateStr).draw();
                                                //}
                                                column.search(dateStr).draw();
                                            },
                                            //mode: "range",
                                        });
                                    } else {
                                        // Default handling for other columns
                                        let input = document.createElement('input');
                                        input.placeholder = title;
                                        input.className = "form-control";
                                        input.style.width = '100%';
                                        column.footer().replaceChildren(input);

                                        // Debounced event listener for user input (1 second delay)
                                        input.addEventListener('keyup', debounce(() => {
                                            if (column.search() !== input.value) {
                                                column.search(input.value).draw();
                                            }
                                        }, 1000));
                                    }
                                });
                        }
                    });
                }
                else {
                    $('#datatables-fgcost-result').DataTable().ajax.reload();
                }
            }
        }

        //$('#roomSelect').change(function () {
        //    reloadTable();
        //});
        
        function downloadSummaryFgCost() {
            // change the room id in the download link
            const room = roomSelect.val();
            const linkDownload = $("#linkDownload")[0];
            // edit the query room
            linkDownload.href = linkDownload.href.replace(/room=\d+/, `room=${room}`);
        }
    </script>
}
