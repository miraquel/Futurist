@model dynamic

@{
    ViewBag.Title = "FG Cost Calculation";
    Layout = "_Layout";
}

@section styles{
    <style>
        .disabled-button {
            pointer-events: none;
            opacity: 0.6;
        }
    </style>
}

@Html.AntiForgeryToken()

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header">
                <h1>FG Cost Calculation Process</h1>
                <!-- Dropdown for room ids -->
                <div class="input-group mb-3">
                    <label class="input-group-text" for="roomSelect">Room</label>
                    <select id="roomSelect" name="roomId" class="form-control">
                        @foreach (var id in ViewBag.RoomIds)
                        {
                            <option value="@id">@id</option>
                        }
                    </select>
                    <label class="input-group-text text-white bg-warning" id="processingLabel" style="display: none;">
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        Processing
                    </label>
                </div>

                <div class="d-flex justify-content-between">
                    <button class="btn btn-success" id="processFgBtn" onclick="processFgCalc()">
                        <i class="ri-play-fill"></i>
                        Calculate FG
                    </button>
                    <div>
                        <a href="@Url.Action("Index", "FgCost")" class="btn btn-primary">
                            <i class="ri-book-2-line"></i>
                            View Summary
                        </a>
                        <a href="@Url.Action("Details", "FgCost")" class="btn btn-info">
                            <i class="bx bx-table"></i>
                            View Details
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="/assets/js/signalr.js"></script>
    <script>
        const roomSelect = $("#roomSelect");
        const roomId = roomSelect.val();
        const token = $('input[name="__RequestVerificationToken"]').val();
        const processFgBtn = $("#processFgBtn");
        const processingLabel = $("#processingLabel");

        // SignalR connection
        let connection;
        let inProcessRoomIds = [];
        let pollingInterval;

        // Initialize SignalR connection
        function initializeSignalR() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/futuristHub")
                .withAutomaticReconnect()
                .build();

            // Handle incoming notifications about running jobs
            connection.on("FgCostProcessingStateChanged", (roomIds) => {
                inProcessRoomIds = roomIds || [];
                updateProcessingUI();
            });

            // Start the connection
            connection.start()
                .then(() => {
                    console.log("SignalR Connected");
                    // Call the correct hub method to get initial state
                    refreshProcessingState();

                    // Set up polling as a backup for notifications
                    pollingInterval = setInterval(refreshProcessingState, 10000); // Check every 10 seconds
                })
                .catch(err => console.error("SignalR Connection Error: ", err));
        }

        // Refresh the processing state from the server
        function refreshProcessingState() {
            connection.invoke("GetFgCostInProcessRoomIds")
                .then(roomIds => {
                    inProcessRoomIds = roomIds || [];
                    updateProcessingUI();
                })
                .catch(err => console.error("Error getting FG Cost processing state: ", err));
        }

        // Update UI based on processing status
        function updateProcessingUI() {
            const currentRoomId = parseInt(roomSelect.val());

            // Check if current room ID is in process
            if (inProcessRoomIds.includes(currentRoomId)) {
                processFgBtn.addClass("disabled-button");
                processingLabel.show();
            } else {
                processFgBtn.removeClass("disabled-button");
                processingLabel.hide();
            }
        }

        function processFgCalc() {
            const roomId = roomSelect.val();

            // Double-check if room is already processing
            if (inProcessRoomIds.includes(parseInt(roomId))) {
                alert("This room is already being processed!");
                return;
            }

            $.ajax({
                url: '/api/FgCostApi/CalculateFgCost',
                type: 'POST',
                data: JSON.stringify(parseInt(roomId) || 0),
                contentType: 'application/json',
                beforeSend: function(xhr) {
                    xhr.setRequestHeader("RequestVerificationToken", token);
                },
                success: function(data){
                    alert(data);
                    // Immediately update processing state after queuing job
                    refreshProcessingState();
                },
                error: function(err){
                    alert(err);
                }
            });
        }

        $('#roomSelect').change(function () {
            updateProcessingUI();
        });
        
        // Initialize SignalR when document is ready
        $(document).ready(function() {
            initializeSignalR();

            // Clean up on page unload
            $(window).on('beforeunload', function() {
                if (pollingInterval) {
                    clearInterval(pollingInterval);
                }
            });
        });
    </script>
}
